from dotenv import load_dotenv
load_dotenv()
import os
import hashlib
import requests
from flask import Flask, request, jsonify, send_from_directory, redirect

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
OK_PUBLIC_KEY = os.getenv('OK_PUBLIC_KEY')
OK_SECRET_KEY = os.getenv('OK_SECRET_KEY')
OK_APP_ID     = os.getenv('OK_APP_ID')
MPETS_API_URL = os.getenv('MPETS_API_URL')

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ OK API
def make_sig(params: dict) -> str:
    s = ''.join(f"{k}={v}" for k, v in sorted(params.items()))
    s += OK_SECRET_KEY
    return hashlib.md5(s.encode('utf-8')).hexdigest()

# –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –∫ API –û–ö
def ok_api_request(method: str, params: dict) -> dict:
    base = {'method': method, 'application_key': OK_PUBLIC_KEY, 'format': 'json'}
    base.update(params)
    base['sig'] = make_sig(base)
    resp = requests.post('https://api.ok.ru/fb.do', data=base)
    return resp.json()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
def send_message(uid: str, text: str, template: dict = None):
    params = {'access_token': os.getenv(f'TOKEN_{uid}', ''), 'uid': uid, 'message': text}
    if template:
        params['template'] = template
    return ok_api_request('mediatopic.post', params)

# –ó–∞–≥–ª—É—à–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ mpets.mobi
def mpets_start_game(uid: str) -> str:
    r = requests.get(f'{MPETS_API_URL}/start_game', params={'user': uid})
    return r.json().get('result', '–æ–∫–µ–π!')

def mpets_feed_pet(uid: str) -> str:
    r = requests.get(f'{MPETS_API_URL}/feed', params={'user': uid})
    return r.json().get('result', '–Ω–∞–µ–ª—Å—è!')

def mpets_show_exhibition(uid: str) -> str:
    r = requests.get(f'{MPETS_API_URL}/exhibition', params={'user': uid})
    return r.json().get('result', '–≥—è–ª!')

def mpets_walk(uid: str) -> str:
    r = requests.get(f'{MPETS_API_URL}/walk', params={'user': uid})
    return r.json().get('result', '–≥—É–ª—è–µ–º!')

def mpets_meadow(uid: str) -> str:
    r = requests.get(f'{MPETS_API_URL}/meadow', params={'user': uid})
    return r.json().get('result', '–ø–æ–ª—è–Ω–∞ —Ç—É—Ç!')

# –ú–∞–ø–∞ –∫–æ–º–∞–Ω–¥
COMMAND_HANDLERS = {
    '–∏–≥—Ä–∞—Ç—å': lambda uid: f"üöÄ –ü–æ–µ—Ö–∞–ª–∏! {mpets_start_game(uid)}",
    '–∫–æ—Ä–º–∏—Ç—å': lambda uid: f"üçñ –¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü —Å—ã—Ç: {mpets_feed_pet(uid)}",
    '–≤—ã—Å—Ç–∞–≤–∫–∞': lambda uid: f"üñºÔ∏è –í—ã—Å—Ç–∞–≤–∫–∞: {mpets_show_exhibition(uid)}",
    '–ø—Ä–æ–≥—É–ª–∫–∞': lambda uid: f"üö∂ –ü—Ä–æ–≥—É–ª–∫–∞: {mpets_walk(uid)}",
    '–ø–æ–ª—è–Ω–∞': lambda uid: f"üåø –ü–æ–ª—è–Ω–∞: {mpets_meadow(uid)}",
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU_TEMPLATE = {
    "type": "buttons",
    "buttons": [
        {"title": "–ò–≥—Ä–∞—Ç—å",   "payload": "–∏–≥—Ä–∞—Ç—å"},
        {"title": "–ö–æ—Ä–º–∏—Ç—å",  "payload": "–∫–æ—Ä–º–∏—Ç—å"},
        {"title": "–í—ã—Å—Ç–∞–≤–∫–∞", "payload": "–≤—ã—Å—Ç–∞–≤–∫–∞"},
        {"title": "–ü—Ä–æ–≥—É–ª–∫–∞", "payload": "–ø—Ä–æ–≥—É–ª–∫–∞"},
        {"title": "–ü–æ–ª—è–Ω–∞",   "payload": "–ø–æ–ª—è–Ω–∞"},
    ]
}

def send_main_menu(uid: str):
    return send_message(uid, "–ß—ë –±—É–¥–µ–º –º—É—Ç–∏—Ç—å?", MAIN_MENU_TEMPLATE)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    return send_from_directory('templates', 'index.html')

@app.route('/oauth/callback')
def oauth_callback():
    code = request.args.get('code')
    resp = requests.get('https://api.ok.ru/oauth/token.do', params={
        'client_id':     OK_APP_ID,
        'client_secret': OK_SECRET_KEY,
        'redirect_uri':  'https://mpetsok.onrender.com/oauth/callback',
        'grant_type':    'authorization_code',
        'code':          code
    })
    data = resp.json()
    # –°–æ—Ö—Ä–∞–Ω–∏ data['access_token'], data['refresh_token'], data['user_id'] –≤ –ë–î
    return '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ú–æ–∂–µ—à—å –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.'

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.json.get('notification', {})
    ntype = data.get('type')
    uid = None

    if ntype == 'message':
        msg = data.get('message', {})
        uid = msg.get('sender', {}).get('uid')
        text = msg.get('text', '').strip().lower()
        handler = COMMAND_HANDLERS.get(text)
        if handler and uid:
            reply = handler(uid)
            return send_message(uid, reply)
        else:
            return send_main_menu(uid)

    if ntype == 'click':
        uid = data.get('uid')
        payload = data.get('payload', '').strip().lower()
        handler = COMMAND_HANDLERS.get(payload)
        if handler and uid:
            reply = handler(uid)
            return send_message(uid, reply)
        else:
            return send_message(uid, '–ù–µ –ø–æ–Ω–∏–º–∞—é, –±—Ä–æ‚Ä¶ –í–æ—Ç –∫–Ω–æ–ø–∫–∏, –∂–º–∏:', MAIN_MENU_TEMPLATE)

    return jsonify({'error': 'unsupported event'}), 400

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))